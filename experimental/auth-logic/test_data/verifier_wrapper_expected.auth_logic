"OakFunctionsLoader::Verifier" says {
    // The verification policy trusts the endorsement file wrapper to give
    // the expected hash of the binary from the endorsement file.
    "OakFunctionsLoader::Endorsement" canSay "OakFunctionsLoader::Binary" has_expected_hash_from(any_hash, "OakFunctionsLoader::Endorsement").
    
    // The verification policy trusts the provenance file wrapper to give the
    // expected hash of the binary from the provenance file.
    "Provenance" canSay "OakFunctionsLoader::Binary" has_expected_hash_from(any_hash, "Provenance").
    
    // The verification policy trusts the provenance file builder to 
    // check when a binary can be successfully built from a provenance file.
    "OakFunctionsLoader::ProvenanceBuilder" canSay any_principal hasProvenance(any_provenance).
    
    // The verification policy trusts the provenance file builder to measure
    // the real hashes of any object.
    "OakFunctionsLoader::ProvenanceBuilder" canSay some_object has_measured_hash(some_hash).
    
    // The verification policy trusts the rekor log checking policy (which 
    // internally depends on the rekor log wrapper) to accurately 
    // determine when an object is really a valid rekor log entry
    "RekorLogCheck" canSay some_object canActAs "ValidRekorEntry".
    
    // The verification policy claims that a binary can assume the identity
    // of an application when ...
    "OakFunctionsLoader::Binary" canActAs "OakFunctionsLoader" :-
        // ... that binary can be built with some provenance file ...
        "OakFunctionsLoader::Binary" hasProvenance("Provenance"),
        // ... and an endorsement file and provenance file both give the same
        // expected hash for the binary ...
        "OakFunctionsLoader::Binary" has_expected_hash_from(binary_hash, "OakFunctionsLoader::Endorsement"),
        "OakFunctionsLoader::Binary" has_expected_hash_from(binary_hash, "Provenance"),
        // ... and the binary has the measured hash claimed by the endorsement/
        /// provenance files.
        "OakFunctionsLoader::Binary" has_measured_hash(binary_hash).

}