// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: proto/provenance_verification.proto

package verification

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerificationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Option:
	//
	//	*VerificationOptions_SkipProvenanceVerification
	//	*VerificationOptions_ReferenceProvenance
	Option isVerificationOptions_Option `protobuf_oneof:"option"`
}

func (x *VerificationOptions) Reset() {
	*x = VerificationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_provenance_verification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationOptions) ProtoMessage() {}

func (x *VerificationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_provenance_verification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationOptions.ProtoReflect.Descriptor instead.
func (*VerificationOptions) Descriptor() ([]byte, []int) {
	return file_proto_provenance_verification_proto_rawDescGZIP(), []int{0}
}

func (m *VerificationOptions) GetOption() isVerificationOptions_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *VerificationOptions) GetSkipProvenanceVerification() *SkipVerification {
	if x, ok := x.GetOption().(*VerificationOptions_SkipProvenanceVerification); ok {
		return x.SkipProvenanceVerification
	}
	return nil
}

func (x *VerificationOptions) GetReferenceProvenance() *ProvenanceReferenceValues {
	if x, ok := x.GetOption().(*VerificationOptions_ReferenceProvenance); ok {
		return x.ReferenceProvenance
	}
	return nil
}

type isVerificationOptions_Option interface {
	isVerificationOptions_Option()
}

type VerificationOptions_SkipProvenanceVerification struct {
	SkipProvenanceVerification *SkipVerification `protobuf:"bytes,1,opt,name=skip_provenance_verification,json=skipProvenanceVerification,proto3,oneof"`
}

type VerificationOptions_ReferenceProvenance struct {
	ReferenceProvenance *ProvenanceReferenceValues `protobuf:"bytes,2,opt,name=reference_provenance,json=referenceProvenance,proto3,oneof"`
}

func (*VerificationOptions_SkipProvenanceVerification) isVerificationOptions_Option() {}

func (*VerificationOptions_ReferenceProvenance) isVerificationOptions_Option() {}

// A singleton value to indicate that verification can be skipped.
type SkipVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SkipVerification) Reset() {
	*x = SkipVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_provenance_verification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipVerification) ProtoMessage() {}

func (x *SkipVerification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_provenance_verification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipVerification.ProtoReflect.Descriptor instead.
func (*SkipVerification) Descriptor() ([]byte, []int) {
	return file_proto_provenance_verification_proto_rawDescGZIP(), []int{1}
}

// A collection of reference values for verifying provenance statements.
type ProvenanceReferenceValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MustHaveBuildCommand         bool             `protobuf:"varint,1,opt,name=must_have_build_command,json=mustHaveBuildCommand,proto3" json:"must_have_build_command,omitempty"`
	ReferenceBuilderImageDigests *Digests         `protobuf:"bytes,3,opt,name=reference_builder_image_digests,json=referenceBuilderImageDigests,proto3" json:"reference_builder_image_digests,omitempty"`
	ReferenceRepoUri             string           `protobuf:"bytes,4,opt,name=reference_repo_uri,json=referenceRepoUri,proto3" json:"reference_repo_uri,omitempty"`
	ReferenceBuilders            *StringAllowList `protobuf:"bytes,5,opt,name=reference_builders,json=referenceBuilders,proto3" json:"reference_builders,omitempty"`
}

func (x *ProvenanceReferenceValues) Reset() {
	*x = ProvenanceReferenceValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_provenance_verification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceReferenceValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceReferenceValues) ProtoMessage() {}

func (x *ProvenanceReferenceValues) ProtoReflect() protoreflect.Message {
	mi := &file_proto_provenance_verification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceReferenceValues.ProtoReflect.Descriptor instead.
func (*ProvenanceReferenceValues) Descriptor() ([]byte, []int) {
	return file_proto_provenance_verification_proto_rawDescGZIP(), []int{2}
}

func (x *ProvenanceReferenceValues) GetMustHaveBuildCommand() bool {
	if x != nil {
		return x.MustHaveBuildCommand
	}
	return false
}

func (x *ProvenanceReferenceValues) GetReferenceBuilderImageDigests() *Digests {
	if x != nil {
		return x.ReferenceBuilderImageDigests
	}
	return nil
}

func (x *ProvenanceReferenceValues) GetReferenceRepoUri() string {
	if x != nil {
		return x.ReferenceRepoUri
	}
	return ""
}

func (x *ProvenanceReferenceValues) GetReferenceBuilders() *StringAllowList {
	if x != nil {
		return x.ReferenceBuilders
	}
	return nil
}

// An allow list of digests, represented as a mapping from cryptographic hash
// function names, to their allow listed values.
type Digests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keys are cryptographic hash algorithms (e.g., sha256).
	// Values are acceptable digests.
	Digests map[string]*StringAllowList `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Digests) Reset() {
	*x = Digests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_provenance_verification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Digests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digests) ProtoMessage() {}

func (x *Digests) ProtoReflect() protoreflect.Message {
	mi := &file_proto_provenance_verification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digests.ProtoReflect.Descriptor instead.
func (*Digests) Descriptor() ([]byte, []int) {
	return file_proto_provenance_verification_proto_rawDescGZIP(), []int{3}
}

func (x *Digests) GetDigests() map[string]*StringAllowList {
	if x != nil {
		return x.Digests
	}
	return nil
}

// An allow list of string values.
type StringAllowList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringAllowList) Reset() {
	*x = StringAllowList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_provenance_verification_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringAllowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringAllowList) ProtoMessage() {}

func (x *StringAllowList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_provenance_verification_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringAllowList.ProtoReflect.Descriptor instead.
func (*StringAllowList) Descriptor() ([]byte, []int) {
	return file_proto_provenance_verification_proto_rawDescGZIP(), []int{4}
}

func (x *StringAllowList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_proto_provenance_verification_proto protoreflect.FileDescriptor

var file_proto_provenance_verification_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x1c, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1a, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x14, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x76, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x75, 0x73, 0x74, 0x48, 0x61, 0x76, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x1f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x52, 0x1c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x69, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x22, 0xbe, 0x01, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x07,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x67, 0x0a, 0x0c, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x14, 0x5a, 0x12,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_provenance_verification_proto_rawDescOnce sync.Once
	file_proto_provenance_verification_proto_rawDescData = file_proto_provenance_verification_proto_rawDesc
)

func file_proto_provenance_verification_proto_rawDescGZIP() []byte {
	file_proto_provenance_verification_proto_rawDescOnce.Do(func() {
		file_proto_provenance_verification_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_provenance_verification_proto_rawDescData)
	})
	return file_proto_provenance_verification_proto_rawDescData
}

var file_proto_provenance_verification_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_provenance_verification_proto_goTypes = []interface{}{
	(*VerificationOptions)(nil),       // 0: verification.provenance.v1.VerificationOptions
	(*SkipVerification)(nil),          // 1: verification.provenance.v1.SkipVerification
	(*ProvenanceReferenceValues)(nil), // 2: verification.provenance.v1.ProvenanceReferenceValues
	(*Digests)(nil),                   // 3: verification.provenance.v1.Digests
	(*StringAllowList)(nil),           // 4: verification.provenance.v1.StringAllowList
	nil,                               // 5: verification.provenance.v1.Digests.DigestsEntry
}
var file_proto_provenance_verification_proto_depIdxs = []int32{
	1, // 0: verification.provenance.v1.VerificationOptions.skip_provenance_verification:type_name -> verification.provenance.v1.SkipVerification
	2, // 1: verification.provenance.v1.VerificationOptions.reference_provenance:type_name -> verification.provenance.v1.ProvenanceReferenceValues
	3, // 2: verification.provenance.v1.ProvenanceReferenceValues.reference_builder_image_digests:type_name -> verification.provenance.v1.Digests
	4, // 3: verification.provenance.v1.ProvenanceReferenceValues.reference_builders:type_name -> verification.provenance.v1.StringAllowList
	5, // 4: verification.provenance.v1.Digests.digests:type_name -> verification.provenance.v1.Digests.DigestsEntry
	4, // 5: verification.provenance.v1.Digests.DigestsEntry.value:type_name -> verification.provenance.v1.StringAllowList
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_provenance_verification_proto_init() }
func file_proto_provenance_verification_proto_init() {
	if File_proto_provenance_verification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_provenance_verification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_provenance_verification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_provenance_verification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceReferenceValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_provenance_verification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Digests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_provenance_verification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringAllowList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_provenance_verification_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VerificationOptions_SkipProvenanceVerification)(nil),
		(*VerificationOptions_ReferenceProvenance)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_provenance_verification_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_provenance_verification_proto_goTypes,
		DependencyIndexes: file_proto_provenance_verification_proto_depIdxs,
		MessageInfos:      file_proto_provenance_verification_proto_msgTypes,
	}.Build()
	File_proto_provenance_verification_proto = out.File
	file_proto_provenance_verification_proto_rawDesc = nil
	file_proto_provenance_verification_proto_goTypes = nil
	file_proto_provenance_verification_proto_depIdxs = nil
}
