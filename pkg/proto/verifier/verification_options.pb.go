// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: proto/verification_options.proto

package verifier

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The keys in the per-encoding maps. NB: enums are not allowed in proto
// maps. We support some permanent values from
// https://github.com/multiformats/multicodec/blob/master/table.csv
type Digest_Type int32

const (
	Digest_IDENTITY Digest_Type = 0
	Digest_SHA1     Digest_Type = 17
	Digest_SHA2_256 Digest_Type = 18
	Digest_SHA2_512 Digest_Type = 19
	Digest_SHA3_512 Digest_Type = 20
	Digest_SHA3_384 Digest_Type = 21
	Digest_SHA3_256 Digest_Type = 22
	Digest_SHA3_224 Digest_Type = 23
	Digest_SHA2_384 Digest_Type = 32
)

// Enum value maps for Digest_Type.
var (
	Digest_Type_name = map[int32]string{
		0:  "IDENTITY",
		17: "SHA1",
		18: "SHA2_256",
		19: "SHA2_512",
		20: "SHA3_512",
		21: "SHA3_384",
		22: "SHA3_256",
		23: "SHA3_224",
		32: "SHA2_384",
	}
	Digest_Type_value = map[string]int32{
		"IDENTITY": 0,
		"SHA1":     17,
		"SHA2_256": 18,
		"SHA2_512": 19,
		"SHA3_512": 20,
		"SHA3_384": 21,
		"SHA3_256": 22,
		"SHA3_224": 23,
		"SHA2_384": 32,
	}
)

func (x Digest_Type) Enum() *Digest_Type {
	p := new(Digest_Type)
	*p = x
	return p
}

func (x Digest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Digest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_verification_options_proto_enumTypes[0].Descriptor()
}

func (Digest_Type) Type() protoreflect.EnumType {
	return &file_proto_verification_options_proto_enumTypes[0]
}

func (x Digest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Digest_Type.Descriptor instead.
func (Digest_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{11, 0}
}

// Defines a verification done on an array of provenances. Each field defines a
// certain verification step. All steps are joined by a logical AND to form the
// final verification result (which is a boolean). Since every option can occur
// at most once, all fields are optional, so an empty proto signifies no
// verification at all.
//
// The outcome of the verification does not depend on the order of provenances
// in the array, since none of the individual steps depends on order.
type VerificationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvenanceCountAtLeast *VerifyProvenanceCountAtLeast `protobuf:"bytes,1,opt,name=provenance_count_at_least,json=provenanceCountAtLeast,proto3,oneof" json:"provenance_count_at_least,omitempty"`
	ProvenanceCountAtMost  *VerifyProvenanceCountAtMost  `protobuf:"bytes,2,opt,name=provenance_count_at_most,json=provenanceCountAtMost,proto3,oneof" json:"provenance_count_at_most,omitempty"`
	AllSameBinaryName      *VerifyAllSameBinaryName      `protobuf:"bytes,3,opt,name=all_same_binary_name,json=allSameBinaryName,proto3,oneof" json:"all_same_binary_name,omitempty"`
	AllSameBinaryDigest    *VerifyAllSameBinaryDigest    `protobuf:"bytes,4,opt,name=all_same_binary_digest,json=allSameBinaryDigest,proto3,oneof" json:"all_same_binary_digest,omitempty"`
	AllWithBuildCommand    *VerifyAllWithBuildCommand    `protobuf:"bytes,5,opt,name=all_with_build_command,json=allWithBuildCommand,proto3,oneof" json:"all_with_build_command,omitempty"`
	AllWithBinaryName      *VerifyAllWithBinaryName      `protobuf:"bytes,6,opt,name=all_with_binary_name,json=allWithBinaryName,proto3,oneof" json:"all_with_binary_name,omitempty"`
	AllWithBinaryDigests   *VerifyAllWithBinaryDigests   `protobuf:"bytes,7,opt,name=all_with_binary_digests,json=allWithBinaryDigests,proto3,oneof" json:"all_with_binary_digests,omitempty"`
	AllWithBuilderNames    *VerifyAllWithBuilderNames    `protobuf:"bytes,8,opt,name=all_with_builder_names,json=allWithBuilderNames,proto3,oneof" json:"all_with_builder_names,omitempty"`
	AllWithBuilderDigests  *VerifyAllWithBuilderDigests  `protobuf:"bytes,9,opt,name=all_with_builder_digests,json=allWithBuilderDigests,proto3,oneof" json:"all_with_builder_digests,omitempty"`
	AllWithRepository      *VerifyAllWithRepository      `protobuf:"bytes,10,opt,name=all_with_repository,json=allWithRepository,proto3,oneof" json:"all_with_repository,omitempty"`
}

func (x *VerificationOptions) Reset() {
	*x = VerificationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationOptions) ProtoMessage() {}

func (x *VerificationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationOptions.ProtoReflect.Descriptor instead.
func (*VerificationOptions) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{0}
}

func (x *VerificationOptions) GetProvenanceCountAtLeast() *VerifyProvenanceCountAtLeast {
	if x != nil {
		return x.ProvenanceCountAtLeast
	}
	return nil
}

func (x *VerificationOptions) GetProvenanceCountAtMost() *VerifyProvenanceCountAtMost {
	if x != nil {
		return x.ProvenanceCountAtMost
	}
	return nil
}

func (x *VerificationOptions) GetAllSameBinaryName() *VerifyAllSameBinaryName {
	if x != nil {
		return x.AllSameBinaryName
	}
	return nil
}

func (x *VerificationOptions) GetAllSameBinaryDigest() *VerifyAllSameBinaryDigest {
	if x != nil {
		return x.AllSameBinaryDigest
	}
	return nil
}

func (x *VerificationOptions) GetAllWithBuildCommand() *VerifyAllWithBuildCommand {
	if x != nil {
		return x.AllWithBuildCommand
	}
	return nil
}

func (x *VerificationOptions) GetAllWithBinaryName() *VerifyAllWithBinaryName {
	if x != nil {
		return x.AllWithBinaryName
	}
	return nil
}

func (x *VerificationOptions) GetAllWithBinaryDigests() *VerifyAllWithBinaryDigests {
	if x != nil {
		return x.AllWithBinaryDigests
	}
	return nil
}

func (x *VerificationOptions) GetAllWithBuilderNames() *VerifyAllWithBuilderNames {
	if x != nil {
		return x.AllWithBuilderNames
	}
	return nil
}

func (x *VerificationOptions) GetAllWithBuilderDigests() *VerifyAllWithBuilderDigests {
	if x != nil {
		return x.AllWithBuilderDigests
	}
	return nil
}

func (x *VerificationOptions) GetAllWithRepository() *VerifyAllWithRepository {
	if x != nil {
		return x.AllWithRepository
	}
	return nil
}

// Verifies that the number of provenances is at least the specified count.
type VerifyProvenanceCountAtLeast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *VerifyProvenanceCountAtLeast) Reset() {
	*x = VerifyProvenanceCountAtLeast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProvenanceCountAtLeast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProvenanceCountAtLeast) ProtoMessage() {}

func (x *VerifyProvenanceCountAtLeast) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProvenanceCountAtLeast.ProtoReflect.Descriptor instead.
func (*VerifyProvenanceCountAtLeast) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyProvenanceCountAtLeast) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Verifies that the number of provenances is at most the specified count.
type VerifyProvenanceCountAtMost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *VerifyProvenanceCountAtMost) Reset() {
	*x = VerifyProvenanceCountAtMost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProvenanceCountAtMost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProvenanceCountAtMost) ProtoMessage() {}

func (x *VerifyProvenanceCountAtMost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProvenanceCountAtMost.ProtoReflect.Descriptor instead.
func (*VerifyProvenanceCountAtMost) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyProvenanceCountAtMost) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Requires that all provenances have the same underlying binary name.
// Verification step will pass if there are <= 1 provenances.
type VerifyAllSameBinaryName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyAllSameBinaryName) Reset() {
	*x = VerifyAllSameBinaryName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllSameBinaryName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllSameBinaryName) ProtoMessage() {}

func (x *VerifyAllSameBinaryName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllSameBinaryName.ProtoReflect.Descriptor instead.
func (*VerifyAllSameBinaryName) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{3}
}

// Requires that all provenances have the same binary digest.
// Verification step will pass if there are <= 1 provenances, or if equality
// cannot be determined since some digests are in a different format.
type VerifyAllSameBinaryDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyAllSameBinaryDigest) Reset() {
	*x = VerifyAllSameBinaryDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllSameBinaryDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllSameBinaryDigest) ProtoMessage() {}

func (x *VerifyAllSameBinaryDigest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllSameBinaryDigest.ProtoReflect.Descriptor instead.
func (*VerifyAllSameBinaryDigest) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{4}
}

// Requires that a build command is available on every single provenance.
type VerifyAllWithBuildCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyAllWithBuildCommand) Reset() {
	*x = VerifyAllWithBuildCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllWithBuildCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllWithBuildCommand) ProtoMessage() {}

func (x *VerifyAllWithBuildCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllWithBuildCommand.ProtoReflect.Descriptor instead.
func (*VerifyAllWithBuildCommand) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{5}
}

// Verifies that the binary name coincides with the specified one, for all
// available provenances. The binary name must be set, so an empty string is not
// permitted.
type VerifyAllWithBinaryName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryName string `protobuf:"bytes,1,opt,name=binary_name,json=binaryName,proto3" json:"binary_name,omitempty"`
}

func (x *VerifyAllWithBinaryName) Reset() {
	*x = VerifyAllWithBinaryName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllWithBinaryName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllWithBinaryName) ProtoMessage() {}

func (x *VerifyAllWithBinaryName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllWithBinaryName.ProtoReflect.Descriptor instead.
func (*VerifyAllWithBinaryName) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyAllWithBinaryName) GetBinaryName() string {
	if x != nil {
		return x.BinaryName
	}
	return ""
}

// Verifies that the binary digest specified in the provenance match ONE of the
// specified ones. It is possible to specify more than one digest of the same
// format.
type VerifyAllWithBinaryDigests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digests []*Digest `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
}

func (x *VerifyAllWithBinaryDigests) Reset() {
	*x = VerifyAllWithBinaryDigests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllWithBinaryDigests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllWithBinaryDigests) ProtoMessage() {}

func (x *VerifyAllWithBinaryDigests) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllWithBinaryDigests.ProtoReflect.Descriptor instead.
func (*VerifyAllWithBinaryDigests) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyAllWithBinaryDigests) GetDigests() []*Digest {
	if x != nil {
		return x.Digests
	}
	return nil
}

// Verifies that the repository coincides with the specified one, for all
// available provenances.
type VerifyAllWithRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryUri string `protobuf:"bytes,1,opt,name=repository_uri,json=repositoryUri,proto3" json:"repository_uri,omitempty"`
}

func (x *VerifyAllWithRepository) Reset() {
	*x = VerifyAllWithRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllWithRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllWithRepository) ProtoMessage() {}

func (x *VerifyAllWithRepository) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllWithRepository.ProtoReflect.Descriptor instead.
func (*VerifyAllWithRepository) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyAllWithRepository) GetRepositoryUri() string {
	if x != nil {
		return x.RepositoryUri
	}
	return ""
}

// Verifies that the trusted builder is among the specified ones, for all
// available provenances. Can use the empty string to match provenances where
// the builder URI is unavailable.
type VerifyAllWithBuilderNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuilderNames []string `protobuf:"bytes,1,rep,name=builder_names,json=builderNames,proto3" json:"builder_names,omitempty"`
}

func (x *VerifyAllWithBuilderNames) Reset() {
	*x = VerifyAllWithBuilderNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllWithBuilderNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllWithBuilderNames) ProtoMessage() {}

func (x *VerifyAllWithBuilderNames) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllWithBuilderNames.ProtoReflect.Descriptor instead.
func (*VerifyAllWithBuilderNames) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyAllWithBuilderNames) GetBuilderNames() []string {
	if x != nil {
		return x.BuilderNames
	}
	return nil
}

// Verifies that the trusted builder is among the specified ones, for all
// available provenances.
type VerifyAllWithBuilderDigests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digests []*Digest `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
}

func (x *VerifyAllWithBuilderDigests) Reset() {
	*x = VerifyAllWithBuilderDigests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAllWithBuilderDigests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAllWithBuilderDigests) ProtoMessage() {}

func (x *VerifyAllWithBuilderDigests) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAllWithBuilderDigests.ProtoReflect.Descriptor instead.
func (*VerifyAllWithBuilderDigests) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyAllWithBuilderDigests) GetDigests() []*Digest {
	if x != nil {
		return x.Digests
	}
	return nil
}

// Contains various digest formats for the same underlying file.
type Digest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps algorithm to the actual raw digest value.
	// The map value is a function of the underlying file and the map key only.
	Binary map[int32][]byte `protobuf:"bytes,1,rep,name=binary,proto3" json:"binary,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Maps algorithm to the hex-encoded digest, e.g. for type SHA2_256
	// this could be
	// "82aac1adbfe3ada1244c1f54b7c949519e1f048067d0c3b236b7ae048fc7e227"
	Hexadecimal map[int32]string `protobuf:"bytes,2,rep,name=hexadecimal,proto3" json:"hexadecimal,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Digest) Reset() {
	*x = Digest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_verification_options_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Digest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digest) ProtoMessage() {}

func (x *Digest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_verification_options_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digest.ProtoReflect.Descriptor instead.
func (*Digest) Descriptor() ([]byte, []int) {
	return file_proto_verification_options_proto_rawDescGZIP(), []int{11}
}

func (x *Digest) GetBinary() map[int32][]byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *Digest) GetHexadecimal() map[int32]string {
	if x != nil {
		return x.Hexadecimal
	}
	return nil
}

var File_proto_verification_options_proto protoreflect.FileDescriptor

var file_proto_verification_options_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0xfd, 0x09, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6c,
	0x65, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x61, 0x6b,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x66, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c,
	0x53, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x02,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x61,
	0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x53, 0x61,
	0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x48, 0x03,
	0x52, 0x13, 0x61, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x04, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x05,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73,
	0x48, 0x06, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x16, 0x61,
	0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x61,
	0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x48, 0x07, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a,
	0x18, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x48, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x6d,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x34, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74,
	0x4d, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41,
	0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x3a, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x1a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x61, 0x6b,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x69, 0x22, 0x40, 0x0a, 0x19, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x1b,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x06, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x46,
	0x0a, 0x0b, 0x68, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x61, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x68, 0x65, 0x78, 0x61, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x48, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x80, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x41, 0x31,
	0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x12,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x13, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x48, 0x41, 0x33, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x48, 0x41, 0x33, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48,
	0x41, 0x33, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41, 0x33,
	0x5f, 0x32, 0x32, 0x34, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x33,
	0x38, 0x34, 0x10, 0x20, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_verification_options_proto_rawDescOnce sync.Once
	file_proto_verification_options_proto_rawDescData = file_proto_verification_options_proto_rawDesc
)

func file_proto_verification_options_proto_rawDescGZIP() []byte {
	file_proto_verification_options_proto_rawDescOnce.Do(func() {
		file_proto_verification_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_verification_options_proto_rawDescData)
	})
	return file_proto_verification_options_proto_rawDescData
}

var file_proto_verification_options_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_verification_options_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_verification_options_proto_goTypes = []interface{}{
	(Digest_Type)(0),                     // 0: oak.release.Digest.Type
	(*VerificationOptions)(nil),          // 1: oak.release.VerificationOptions
	(*VerifyProvenanceCountAtLeast)(nil), // 2: oak.release.VerifyProvenanceCountAtLeast
	(*VerifyProvenanceCountAtMost)(nil),  // 3: oak.release.VerifyProvenanceCountAtMost
	(*VerifyAllSameBinaryName)(nil),      // 4: oak.release.VerifyAllSameBinaryName
	(*VerifyAllSameBinaryDigest)(nil),    // 5: oak.release.VerifyAllSameBinaryDigest
	(*VerifyAllWithBuildCommand)(nil),    // 6: oak.release.VerifyAllWithBuildCommand
	(*VerifyAllWithBinaryName)(nil),      // 7: oak.release.VerifyAllWithBinaryName
	(*VerifyAllWithBinaryDigests)(nil),   // 8: oak.release.VerifyAllWithBinaryDigests
	(*VerifyAllWithRepository)(nil),      // 9: oak.release.VerifyAllWithRepository
	(*VerifyAllWithBuilderNames)(nil),    // 10: oak.release.VerifyAllWithBuilderNames
	(*VerifyAllWithBuilderDigests)(nil),  // 11: oak.release.VerifyAllWithBuilderDigests
	(*Digest)(nil),                       // 12: oak.release.Digest
	nil,                                  // 13: oak.release.Digest.BinaryEntry
	nil,                                  // 14: oak.release.Digest.HexadecimalEntry
}
var file_proto_verification_options_proto_depIdxs = []int32{
	2,  // 0: oak.release.VerificationOptions.provenance_count_at_least:type_name -> oak.release.VerifyProvenanceCountAtLeast
	3,  // 1: oak.release.VerificationOptions.provenance_count_at_most:type_name -> oak.release.VerifyProvenanceCountAtMost
	4,  // 2: oak.release.VerificationOptions.all_same_binary_name:type_name -> oak.release.VerifyAllSameBinaryName
	5,  // 3: oak.release.VerificationOptions.all_same_binary_digest:type_name -> oak.release.VerifyAllSameBinaryDigest
	6,  // 4: oak.release.VerificationOptions.all_with_build_command:type_name -> oak.release.VerifyAllWithBuildCommand
	7,  // 5: oak.release.VerificationOptions.all_with_binary_name:type_name -> oak.release.VerifyAllWithBinaryName
	8,  // 6: oak.release.VerificationOptions.all_with_binary_digests:type_name -> oak.release.VerifyAllWithBinaryDigests
	10, // 7: oak.release.VerificationOptions.all_with_builder_names:type_name -> oak.release.VerifyAllWithBuilderNames
	11, // 8: oak.release.VerificationOptions.all_with_builder_digests:type_name -> oak.release.VerifyAllWithBuilderDigests
	9,  // 9: oak.release.VerificationOptions.all_with_repository:type_name -> oak.release.VerifyAllWithRepository
	12, // 10: oak.release.VerifyAllWithBinaryDigests.digests:type_name -> oak.release.Digest
	12, // 11: oak.release.VerifyAllWithBuilderDigests.digests:type_name -> oak.release.Digest
	13, // 12: oak.release.Digest.binary:type_name -> oak.release.Digest.BinaryEntry
	14, // 13: oak.release.Digest.hexadecimal:type_name -> oak.release.Digest.HexadecimalEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_verification_options_proto_init() }
func file_proto_verification_options_proto_init() {
	if File_proto_verification_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_verification_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProvenanceCountAtLeast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProvenanceCountAtMost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllSameBinaryName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllSameBinaryDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllWithBuildCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllWithBinaryName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllWithBinaryDigests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllWithRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllWithBuilderNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAllWithBuilderDigests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_verification_options_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Digest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_verification_options_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_verification_options_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_verification_options_proto_goTypes,
		DependencyIndexes: file_proto_verification_options_proto_depIdxs,
		EnumInfos:         file_proto_verification_options_proto_enumTypes,
		MessageInfos:      file_proto_verification_options_proto_msgTypes,
	}.Build()
	File_proto_verification_options_proto = out.File
	file_proto_verification_options_proto_rawDesc = nil
	file_proto_verification_options_proto_goTypes = nil
	file_proto_verification_options_proto_depIdxs = nil
}
