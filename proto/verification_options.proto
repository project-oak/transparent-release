// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package oak.release;

option go_package = "proto/verifier";

// Defines a verification done on an array of provenances. Each field defines a
// certain verification step. All steps are joined by a logical AND to form the
// final verification result (which is a boolean). Since every option can occur
// at most once, all fields are optional, so an empty proto signifies no
// verification at all.
//
// The outcome of the verification does not depend on the order of provenances
// in the array, since none of the individual steps depends on order.
message VerificationOptions {
  optional VerifyProvenanceCountAtLeast provenance_count_at_least = 1;
  optional VerifyProvenanceCountAtMost provenance_count_at_most = 2;
  optional VerifyAllSameBinaryName all_same_binary_name = 3;
  optional VerifyAllSameBinaryDigest all_same_binary_digest = 4;
  optional VerifyAllWithBuildCommand all_with_build_command = 5;
  optional VerifyAllWithBinaryName all_with_binary_name = 6;
  optional VerifyAllWithBinaryDigests all_with_binary_digests = 7;
  optional VerifyAllWithBuilderNames all_with_builder_names = 8;
  optional VerifyAllWithBuilderDigests all_with_builder_digests = 9;
  optional VerifyAllWithRepository all_with_repository = 10;
}

// Verifies that the number of provenances is at least the specified count.
message VerifyProvenanceCountAtLeast {
  int32 count = 1;
}

// Verifies that the number of provenances is at most the specified count.
message VerifyProvenanceCountAtMost {
  int32 count = 1;
}

// Requires that all provenances have the same underlying binary name.
// Verification step will pass if there are <= 1 provenances.
message VerifyAllSameBinaryName {}

// Requires that all provenances have the same binary digest.
// Verification step will pass if there are <= 1 provenances, or if equality
// cannot be determined since some digests are in a different format.
message VerifyAllSameBinaryDigest {}

// Requires that a build command is available on every single provenance.
message VerifyAllWithBuildCommand {}

// Verifies that the binary name coincides with the specified one, for all
// available provenances. The binary name must be set, so an empty string is not
// permitted.
message VerifyAllWithBinaryName {
  string binary_name = 1;
}

// Verifies that the binary digest specified in the provenance match ONE of the
// specified ones. It is possible to specify more than one digest of the same
// format.
message VerifyAllWithBinaryDigests {
  repeated Digest digests = 1;
}

// Verifies that the repository coincides with the specified one, for all
// available provenances.
message VerifyAllWithRepository {
  string repository_uri = 1;
}

// Verifies that the trusted builder is among the specified ones, for all
// available provenances. Can use the empty string to match provenances where
// the builder URI is unavailable.
message VerifyAllWithBuilderNames {
  repeated string builder_names = 1;
}

// Verifies that the trusted builder is among the specified ones, for all
// available provenances.
message VerifyAllWithBuilderDigests {
  repeated Digest digests = 1;
}

// Contains various digest formats for the same file.
message Digest {
  // The keys of the data map. NB: enums are not allowed in proto maps.
  // Details: https://github.com/multiformats/multicodec/blob/master/table.csv
  enum Type {
    UNDEFINED = 0;
    SHA1_HEX = 0x11;
    SHA2_256_HEX = 0x12;
  }

  // Maps algorithm and encoding to the actual digest value, e.g. for type
  // SHA2_256_HEX this could be
  // "82aac1adbfe3ada1244c1f54b7c949519e1f048067d0c3b236b7ae048fc7e227"
  // The map value is a function of the binary contents and the map key only.
  map<int32, string> data = 1;
}
